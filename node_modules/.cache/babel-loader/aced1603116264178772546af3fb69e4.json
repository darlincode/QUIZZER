{"remainingRequest":"/home/darlington-chuks/Desktop/new-projs/Quiz-App/node_modules/thread-loader/dist/cjs.js!/home/darlington-chuks/Desktop/new-projs/Quiz-App/node_modules/babel-loader/lib/index.js!/home/darlington-chuks/Desktop/new-projs/Quiz-App/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/darlington-chuks/Desktop/new-projs/Quiz-App/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/darlington-chuks/Desktop/new-projs/Quiz-App/src/components/QuestionBox.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/darlington-chuks/Desktop/new-projs/Quiz-App/src/components/QuestionBox.vue","mtime":1622737394398},{"path":"/home/darlington-chuks/Desktop/new-projs/Quiz-App/node_modules/cache-loader/dist/cjs.js","mtime":1622713490251},{"path":"/home/darlington-chuks/Desktop/new-projs/Quiz-App/node_modules/thread-loader/dist/cjs.js","mtime":1622633772483},{"path":"/home/darlington-chuks/Desktop/new-projs/Quiz-App/node_modules/babel-loader/lib/index.js","mtime":1622633772490},{"path":"/home/darlington-chuks/Desktop/new-projs/Quiz-App/node_modules/cache-loader/dist/cjs.js","mtime":1622713490251},{"path":"/home/darlington-chuks/Desktop/new-projs/Quiz-App/node_modules/vue-loader/lib/index.js","mtime":1622633810743}],"contextDependencies":[],"result":["import _toConsumableArray from \"/home/darlington-chuks/Desktop/new-projs/Quiz-App/node_modules/@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport _ from 'lodash';\nexport default {\n  props: {\n    currentQuestion: Object,\n    next: Function,\n    increment: Function\n  },\n  data: function data() {\n    return {\n      selectedIndex: null,\n      shuffledAnswers: [],\n      correctIndex: null,\n      answered: false,\n      displayMessage: '',\n      countAns: 0\n    };\n  },\n  watch: {\n    currentQuestion: {\n      immediate: true,\n      handler: function handler() {\n        this.selectedIndex = null, this.shuffleAnswers();\n        this.answered = false, this.displayMessage = '';\n      }\n    }\n  },\n  methods: {\n    selectAnswer: function selectAnswer(index) {\n      if (!this.answered) {\n        this.selectedIndex = index;\n      }\n\n      console.log(index);\n    },\n    highlightAnswer: function highlightAnswer(index) {\n      var retClass = '';\n\n      if (!this.answered && index === this.selectedIndex) {\n        retClass = 'selected';\n      } else if (this.answered && index === this.correctIndex) {\n        retClass = 'correct';\n      } else if (this.answered && index === this.selectedIndex && index !== this.correctIndex) {\n        retClass = 'incorrect';\n      }\n\n      return retClass;\n    },\n    submitAnswer: function submitAnswer() {\n      var isCorrect = false;\n      this.displayMessage = \"SORRY YOO! You were wrong..\";\n      this.answered = true;\n\n      if (this.selectedIndex === this.correctIndex) {\n        isCorrect = true;\n        this.displayMessage = \"CHEERS YOO! You got it right!\";\n      }\n\n      this.countAns++;\n\n      if (this.countAns > 9) {\n        this.displayMessage = this.displayMessage + \"\\nGame is Over! Thanks for Playing\\n\";\n      }\n\n      this.increment(isCorrect);\n    },\n    shuffleAnswers: function shuffleAnswers() {\n      var answers = [].concat(_toConsumableArray(this.currentQuestion.incorrect_answers), [this.currentQuestion.correct_answer]);\n      this.shuffledAnswers = _.shuffle(answers);\n      this.correctIndex = this.shuffledAnswers.indexOf(this.currentQuestion.correct_answer);\n    }\n  },\n  computed: {\n    Answers: function Answers() {\n      var answers = _toConsumableArray(this.currentQuestion.incorrect_answers);\n\n      answers.push(this.currentQuestion.correct_answer);\n      return answers;\n    }\n  }\n};",{"version":3,"sources":["QuestionBox.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsCA,OAAA,CAAA,MAAA,QAAA;AAEA,eAAA;AACA,EAAA,KAAA,EAAA;AACA,IAAA,eAAA,EAAA,MADA;AAEA,IAAA,IAAA,EAAA,QAFA;AAGA,IAAA,SAAA,EAAA;AAHA,GADA;AAMA,EAAA,IANA,kBAMA;AACA,WAAA;AACA,MAAA,aAAA,EAAA,IADA;AAEA,MAAA,eAAA,EAAA,EAFA;AAGA,MAAA,YAAA,EAAA,IAHA;AAIA,MAAA,QAAA,EAAA,KAJA;AAKA,MAAA,cAAA,EAAA,EALA;AAMA,MAAA,QAAA,EAAA;AANA,KAAA;AAQA,GAfA;AAgBA,EAAA,KAAA,EAAA;AACA,IAAA,eAAA,EAAA;AACA,MAAA,SAAA,EAAA,IADA;AAEA,MAAA,OAFA,qBAEA;AACA,aAAA,aAAA,GAAA,IAAA,EACA,KAAA,cAAA,EADA;AAEA,aAAA,QAAA,GAAA,KAAA,EACA,KAAA,cAAA,GAAA,EADA;AAEA;AAPA;AADA,GAhBA;AA2BA,EAAA,OAAA,EAAA;AACA,IAAA,YADA,wBACA,KADA,EACA;AACA,UAAA,CAAA,KAAA,QAAA,EAAA;AACA,aAAA,aAAA,GAAA,KAAA;AACA;;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,KAAA;AACA,KANA;AAOA,IAAA,eAPA,2BAOA,KAPA,EAOA;AACA,UAAA,QAAA,GAAA,EAAA;;AAEA,UAAA,CAAA,KAAA,QAAA,IAAA,KAAA,KAAA,KAAA,aAAA,EAAA;AACA,QAAA,QAAA,GAAA,UAAA;AACA,OAFA,MAGA,IAAA,KAAA,QAAA,IAAA,KAAA,KAAA,KAAA,YAAA,EAAA;AACA,QAAA,QAAA,GAAA,SAAA;AACA,OAFA,MAGA,IAAA,KAAA,QAAA,IAAA,KAAA,KAAA,KAAA,aAAA,IAAA,KAAA,KAAA,KAAA,YAAA,EAAA;AACA,QAAA,QAAA,GAAA,WAAA;AACA;;AACA,aAAA,QAAA;AACA,KApBA;AAqBA,IAAA,YArBA,0BAqBA;AACA,UAAA,SAAA,GAAA,KAAA;AAEA,WAAA,cAAA,GAAA,6BAAA;AACA,WAAA,QAAA,GAAA,IAAA;;AAEA,UAAA,KAAA,aAAA,KAAA,KAAA,YAAA,EAAA;AACA,QAAA,SAAA,GAAA,IAAA;AACA,aAAA,cAAA,GAAA,+BAAA;AACA;;AACA,WAAA,QAAA;;AAEA,UAAA,KAAA,QAAA,GAAA,CAAA,EAAA;AACA,aAAA,cAAA,GAAA,KAAA,cAAA,GAAA,sCAAA;AACA;;AAEA,WAAA,SAAA,CAAA,SAAA;AAEA,KAvCA;AAwCA,IAAA,cAxCA,4BAwCA;AACA,UAAA,OAAA,gCAAA,KAAA,eAAA,CAAA,iBAAA,IAAA,KAAA,eAAA,CAAA,cAAA,EAAA;AACA,WAAA,eAAA,GAAA,CAAA,CAAA,OAAA,CAAA,OAAA,CAAA;AACA,WAAA,YAAA,GAAA,KAAA,eAAA,CAAA,OAAA,CAAA,KAAA,eAAA,CAAA,cAAA,CAAA;AAEA;AA7CA,GA3BA;AA0EA,EAAA,QAAA,EAAA;AACA,IAAA,OADA,qBACA;AACA,UAAA,OAAA,sBAAA,KAAA,eAAA,CAAA,iBAAA,CAAA;;AACA,MAAA,OAAA,CAAA,IAAA,CAAA,KAAA,eAAA,CAAA,cAAA;AACA,aAAA,OAAA;AACA;AALA;AA1EA,CAAA","sourcesContent":["<template>\n  <div class=\"question-box\">\n    <b-jumbotron>\n      <template slot=\"lead\">\n        <h5 v-html=\"currentQuestion.question\"></h5>\n        <!-- {{currentQuestion.question}} -->\n      </template>\n      <hr>\n\n      <b-list-group>\n        <b-list-group-item\n          v-for=\"(answer,index) in shuffledAnswers\" \n          :key=\"index\" \n          @click=\"selectAnswer(index)\"\n          :class=\"highlightAnswer(index)\">\n          <!-- {{answer}} -->\n          <b-p v-html=\"answer\"></b-p>\n        </b-list-group-item>\n      </b-list-group>\n\n      <br>\n\n      <b-button variant=\"primary\"\n      @click=\"submitAnswer\"\n      :disabled=\"selectedIndex===null || answered \" >\n        Submit</b-button> \n      <b-button @click=\"next\" variant=\"success\"\n      :disabled=\"!answered || countAns>9\">\n        Next\n      </b-button>\n       <br><br>\n       <b><b-h3>{{displayMessage}}</b-h3></b>\n    </b-jumbotron>\n   \n  </div>\n</template>\n\n<script>\nimport _ from 'lodash'\n\nexport default {\n  props: {\n    currentQuestion: Object,\n    next: Function,\n    increment: Function\n  },\n  data(){\n    return {\n      selectedIndex: null,\n      shuffledAnswers: [],\n      correctIndex: null,\n      answered: false,\n      displayMessage: '',\n      countAns: 0\n    }\n  },\n  watch: {\n    currentQuestion : {\n      immediate: true,\n      handler(){\n        this.selectedIndex = null,\n        this.shuffleAnswers()\n        this.answered = false,\n        this.displayMessage = ''\n      }\n    }\n  },\n  methods:{\n    selectAnswer(index) {\n      if(!this.answered){\n        this.selectedIndex = index\n      }\n      console.log(index)\n    },\n    highlightAnswer(index) {\n        let retClass = ''\n\n        if(!this.answered && index === this.selectedIndex){\n            retClass = 'selected'\n        }\n        else if(this.answered && index === this.correctIndex){\n          retClass = 'correct'\n        }\n        else if(this.answered && index === this.selectedIndex && index !== this.correctIndex){\n          retClass ='incorrect'\n        }\n        return retClass\n    },\n    submitAnswer(){\n      let isCorrect = false\n\n      this.displayMessage = \"SORRY YOO! You were wrong..\"\n      this.answered = true\n\n      if(this.selectedIndex === this.correctIndex){\n        isCorrect = true\n        this.displayMessage = \"CHEERS YOO! You got it right!\"\n      }\n      this.countAns++;\n\n      if(this.countAns>9){\n          this.displayMessage = this.displayMessage+\"\\nGame is Over! Thanks for Playing\\n\";\n      }\n\n      this.increment(isCorrect)\n\n    },\n    shuffleAnswers(){\n      let answers = [...this.currentQuestion.incorrect_answers,this.currentQuestion.correct_answer]\n      this.shuffledAnswers = _.shuffle(answers)\n      this.correctIndex = this.shuffledAnswers.indexOf(this.currentQuestion.correct_answer)\n\n    }\n  },\n  computed: {\n    Answers() {\n      let answers = [...this.currentQuestion.incorrect_answers]\n      answers.push(this.currentQuestion.correct_answer)\n      return answers;\n    }\n  }\n}\n</script>\n\n<style scoped>\n.btn {\n  margin: 0 10px;\n}\n.list-group-item:hover {\n  background: rgb(211, 133, 204);\n  cursor: pointer;\n}\n.selected {\n  background-color: rgb(125, 192, 255);\n}\n.correct{\n  background-color: rgb(3, 247, 3);\n}\n.incorrect{\n  background-color: rgb(236, 2, 2);\n}\n</style>\n"],"sourceRoot":"src/components"}]}